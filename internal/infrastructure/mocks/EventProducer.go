// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/lorenaziviani/txstream/internal/infrastructure/config"
	"github.com/lorenaziviani/txstream/internal/infrastructure/models"
	mock "github.com/stretchr/testify/mock"
)

// NewEventProducer creates a new instance of EventProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventProducer {
	mock := &EventProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EventProducer is an autogenerated mock type for the EventProducer type
type EventProducer struct {
	mock.Mock
}

type EventProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *EventProducer) EXPECT() *EventProducer_Expecter {
	return &EventProducer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type EventProducer
func (_mock *EventProducer) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EventProducer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type EventProducer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *EventProducer_Expecter) Close() *EventProducer_Close_Call {
	return &EventProducer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *EventProducer_Close_Call) Run(run func()) *EventProducer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventProducer_Close_Call) Return(err error) *EventProducer_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EventProducer_Close_Call) RunAndReturn(run func() error) *EventProducer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function for the type EventProducer
func (_mock *EventProducer) GetConfig() *config.KafkaConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *config.KafkaConfig
	if returnFunc, ok := ret.Get(0).(func() *config.KafkaConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.KafkaConfig)
		}
	}
	return r0
}

// EventProducer_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type EventProducer_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *EventProducer_Expecter) GetConfig() *EventProducer_GetConfig_Call {
	return &EventProducer_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *EventProducer_GetConfig_Call) Run(run func()) *EventProducer_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventProducer_GetConfig_Call) Return(kafkaConfig *config.KafkaConfig) *EventProducer_GetConfig_Call {
	_c.Call.Return(kafkaConfig)
	return _c
}

func (_c *EventProducer_GetConfig_Call) RunAndReturn(run func() *config.KafkaConfig) *EventProducer_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnected provides a mock function for the type EventProducer
func (_mock *EventProducer) IsConnected() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// EventProducer_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type EventProducer_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
func (_e *EventProducer_Expecter) IsConnected() *EventProducer_IsConnected_Call {
	return &EventProducer_IsConnected_Call{Call: _e.mock.On("IsConnected")}
}

func (_c *EventProducer_IsConnected_Call) Run(run func()) *EventProducer_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventProducer_IsConnected_Call) Return(b bool) *EventProducer_IsConnected_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *EventProducer_IsConnected_Call) RunAndReturn(run func() bool) *EventProducer_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// PublishEvent provides a mock function for the type EventProducer
func (_mock *EventProducer) PublishEvent(ctx context.Context, event *models.OutboxEvent) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for PublishEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.OutboxEvent) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EventProducer_PublishEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishEvent'
type EventProducer_PublishEvent_Call struct {
	*mock.Call
}

// PublishEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event *models.OutboxEvent
func (_e *EventProducer_Expecter) PublishEvent(ctx interface{}, event interface{}) *EventProducer_PublishEvent_Call {
	return &EventProducer_PublishEvent_Call{Call: _e.mock.On("PublishEvent", ctx, event)}
}

func (_c *EventProducer_PublishEvent_Call) Run(run func(ctx context.Context, event *models.OutboxEvent)) *EventProducer_PublishEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.OutboxEvent
		if args[1] != nil {
			arg1 = args[1].(*models.OutboxEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *EventProducer_PublishEvent_Call) Return(err error) *EventProducer_PublishEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EventProducer_PublishEvent_Call) RunAndReturn(run func(ctx context.Context, event *models.OutboxEvent) error) *EventProducer_PublishEvent_Call {
	_c.Call.Return(run)
	return _c
}
